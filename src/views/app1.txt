var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var logger = require('morgan');
const app = express();
const http = require('http').Server(app)
const io = require('socket.io')(http);
//database
var db = require('./config/database');
const Lot = require('./models/Lot');
const Vehicle = require('./models/Vehicle');
const Bid = require('./models/Bid');

//test db
db.authenticate()
  .then(() => console.log('Database Connected...'))
  .catch((err) => console.log('Error: ' +err));

//routes
var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var vehiclesRouter = require('./routes/vehicles');
var bidsRouter = require('./routes/bids');
var lotsRouter = require('./routes/lots');

//api
var VehiclesAPI = require('./api/vehicles');
var BidsAPI = require('./api/bids');
var LotsAPI = require('./api/lots');
var LiveAPI = require('./api/live');

const PORT = process.env.PORT || 3000;

//const server = app.listen(PORT, console.log(`Server started on port ${PORT}`));

//app.listen(PORT, console.log(`Server started on port ${PORT}`));

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended : true}));

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', '*');
  if(req.method === 'OPTIONS') {
    res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET');
    return res.status(200).json({});
  }
  next();
});

//app.use(express.json());
//app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));


app.use('/api/vehicles', VehiclesAPI);
app.use('/api/lots', LotsAPI);
app.use('/api/live', LiveAPI);
app.use('/api/bids', BidsAPI);

app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/vehicles', vehiclesRouter);
app.use('/lots', lotsRouter);
app.use('/bids', bidsRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});


// Set socket.io listeners.
var numUsers = 0

io.on('connection', (socket) => {
  numUsers++
  console.log('a user connected ' + numUsers);

  socket.on('join_room', function (data) {
    const room = data.lot
    socket.join(room)
  })

  socket.on('room_message', function (data) {
    const room = data.lot
    io.sockets.in(room).emit('message', data);
  })

  socket.on("new_bid", function (data) {
    io.sockets.emit('room_message', data);
  });

  socket.on("initial_data", function (data) {
    Vehicle.findOne({
        where: {
          lot_id: data.lot,
          completed: 0
        },
        include: [{
          model: Bid,
          as: 'bids',
        }],
        order: [
          [Bid, 'created_at', 'DESC']
        ]
      })
      .then(vehicle => {
        //console.log(vehicle)
        io.sockets.emit("get_data", vehicle)
      });
  });

  socket.on("initial_bids", function (data) {
    Bid.findAll({
        where: {
          vehicle_id: data.vehicle
        },
        order: [['created_at', 'DESC']],
        limit: 5
      })
      .then(bid => {
        io.sockets.emit("get_bids", bid)
      });
  });

  /*socket.on("initial_data", function (data) {
    Vehicle.findOne({
        where: {
          lot_id: data.lot,
          completed: 0
        },
        order: [
          ['lot_number']
        ]
      }, {
        include: [{
          model: Bid,
          as: 'bids'
        }],
        order: [
          [Bid, 'bid_amount', 'DESC']
        ]
      })
      .then(vehicle => {
        console.log(vehicle)
        io.sockets.emit("get_data", vehicle)
      });
  });*/
/*
  socket.on('start_timer', function (data) {
    let timer = data.timer
    let reset = data.reset
    console.log('start ' + data.timer)
    console.log('reset ' + data.reset)
    let countDown = setInterval(function () {
      console.log(data)
      timer--;
      io.sockets.emit('timer', timer);
      if (timer === 0) {
        clearInterval(countDown);
      }
    }, 1000);
  });*/

  socket.on('disconnect', () => {
    numUsers--
    console.log('user disconnected ' + numUsers);
  });
});

http.listen(PORT, console.log(`Server started on port ${PORT}`));

module.exports = app;